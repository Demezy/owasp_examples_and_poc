# Use the official Rust image as the build environment
FROM rust AS builder

# Create blank project
RUN USER=root cargo new medium-rust-dockerize

# We want dependencies cached, so copy those first.
COPY Cargo.toml Cargo.lock /usr/src/medium-rust-dockerize/

# Set the working directory
WORKDIR /usr/src/medium-rust-dockerize

## Install target platform (Cross-Compilation) --> Needed for Alpine
RUN rustup target add x86_64-unknown-linux-musl

# This is a dummy build to get the dependencies cached.
RUN cargo build --target x86_64-unknown-linux-musl --release

# Now copy in the rest of the sources
COPY src /usr/src/medium-rust-dockerize/src/

## Touch main.rs to prevent cached release build
RUN touch /usr/src/medium-rust-dockerize/src/main.rs

# This is the actual application build.
RUN cargo build --target x86_64-unknown-linux-musl --release


# Use a minimal Alpine image as the runtime environment
FROM alpine

# Set the working directory
WORKDIR /app
EXPOSE 8000

# Copy the binary from the builder stage to the runtime environment
COPY --from=builder /usr/src/medium-rust-dockerize/target/x86_64-unknown-linux-musl/release/medium-rust-dockerize /usr/local/bin


RUN mkdir -p ./content


# Run the application
CMD ["/usr/local/bin/medium-rust-dockerize"]

# # Run the binary
# CMD ["./ssrf"]
